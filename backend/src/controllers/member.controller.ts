import { Request, Response } from "express";
import { MemberModel } from "../models/member.model";
import { memberSchema, memberUpdateSchema } from "../validations/member.validation";

export const createMember = async (req: Request, res: Response) => {
    try {
        // Validate request body
        const bodyData = req.body || {};
        console.log('Raw request body:', bodyData);
        const validatedData = memberSchema.parse(bodyData);
        const { name, participants, bio, event, slug, year } = validatedData;
        console.log('Validated data:', validatedData);
        console.log('Year value:', year, 'Type:', typeof year);

        // Additional validation for participants
        if (!participants || typeof participants !== 'string' || participants.trim().length === 0) {
            return res.status(400).json({
                success: false,
                error: "participants is required and must be a non-empty string"
            });
        }

        // Check if member with same name exists
        const existMember = await MemberModel.findOne({ name });
        if (existMember) {
            return res.status(409).json({
                success: false,
                message: `${name} member already exists.`
            });
        }

        const files = req.files as {
            [fieldname: string]: Express.Multer.File[];
        };

        // Get image paths (optional)
        const imageFiles = files?.images || [];
        const imagePaths = imageFiles.map(file => file.path);

        // Create new member (uniqueId will be auto-generated by the model)
        const newMember = await MemberModel.create({
            name,
            participants,
            bio,
            images: imagePaths,
            event,
            slug,
            year
        });

        console.log('Created member:', newMember);

        res.status(201).json({
            success: true,
            message: "Member created successfully.",
            data: newMember
        });
    } catch (error: any) {
        console.error("Error creating member:", error);
        if (error.name === 'ZodError') {
            return res.status(400).json({
                success: false,
                error: "Validation error",
                details: error.errors
            });
        }
        res.status(500).json({
            success: false,
            error: "Internal server error"
        });
    }
};

export const getAllMember = async (req: Request, res: Response) => {
    try {
        const members = await MemberModel.find();
        if (!members || members.length === 0) {
            return res.status(404).json({
                success: false,
                message: "No members found."
            });
        }

        res.status(200).json({
            success: true,
            message: "Members retrieved successfully.",
            data: members
        });
    } catch (error: any) {
        console.error("Error Getting members:", error.message);
        res.status(500).json({
            success: false,
            error: "Internal server error"
        });
    }
};

export const getMemberById = async (req: Request, res: Response) => {
    try {
        const { id } = req.params;
        const member = await MemberModel.findById(id);
        if (!member) {
            return res.status(404).json({
                success: false,
                message: "Invalid Member Id."
            });
        }

        res.status(200).json({
            success: true,
            message: "Member retrieved successfully.",
            data: member
        });
    } catch (error: any) {
        console.error("Error Getting member by Id:", error.message);
        res.status(500).json({
            success: false,
            error: "Internal server error"
        });
    }
};

export const updateMemberById = async (req: Request, res: Response) => {
    try {
        const { id } = req.params;

        // Check if member exists
        const existMember = await MemberModel.findById(id);
        if (!existMember) {
            return res.status(404).json({
                success: false,
                message: "Invalid Member Id."
            });
        }

        // Extract files from multer upload
        const files = req.files as {
            [fieldname: string]: Express.Multer.File[];
        };

        const imageFiles = files?.images || [];

        // Build update object
        const updateData: any = {};

        // Validate request body if provided
        if (Object.keys(req.body).length > 0) {
            const validatedData = memberUpdateSchema.parse(req.body);
            const { name, participants, bio, event, slug, year } = validatedData;

            if (name !== undefined) updateData.name = name;
            if (participants !== undefined) updateData.participants = participants;
            if (bio !== undefined) updateData.bio = bio;
            if (event !== undefined) updateData.event = event;
            if (slug !== undefined) updateData.slug = slug;
            if (year !== undefined) updateData.year = year;
        }

        // Append new images to existing images array
        if (imageFiles.length > 0) {
            updateData.images = [...(existMember.images || []), ...imageFiles.map(f => f.path)];
        }

        if (Object.keys(updateData).length === 0) {
            return res.status(400).json({
                success: false,
                message: "At least one field or file must be provided for update.",
            });
        }

        // Update member document and return updated doc
        const updatedItem = await MemberModel.findByIdAndUpdate(id, updateData, {
            new: true,
            upsert: false,
        });

        if (!updatedItem) {
            return res.status(404).json({
                success: false,
                message: `Member with ID ${id} not found.`,
            });
        }

        return res.status(200).json({
            success: true,
            message: "Member item updated successfully.",
            data: updatedItem,
        });
    } catch (error: any) {
        console.error("Error Updating member:", error.message);
        if (error.name === 'ZodError') {
            return res.status(400).json({
                success: false,
                error: "Validation error",
                details: error.errors
            });
        }
        res.status(500).json({
            success: false,
            error: "Internal server error"
        });
    }
};

export const deleteMemberById = async (req: Request, res: Response) => {
    try {
        const { id } = req.params;
        const member = await MemberModel.findById(id);
        if (!member) {
            return res.status(404).json({
                success: false,
                message: "Invalid Member Id."
            });
        }

        await MemberModel.findByIdAndDelete(id);

        res.status(200).json({
            success: true,
            message: `${member.name} member deleted successfully.`
        });
    } catch (error: any) {
        console.error("Error Deleting member by Id:", error.message);
        res.status(500).json({
            success: false,
            error: "Internal server error"
        });
    }
};
